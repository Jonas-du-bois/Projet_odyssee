# Script de validation finale avant d√©ploiement Heroku
# Utilisation: .\validate-heroku-deployment.ps1

param(
    [switch]$Verbose
)

Write-Host "üîç Validation du d√©ploiement Heroku pour Breitling League..." -ForegroundColor Green

# Se d√©placer vers le dossier backend
Set-Location "c:\Users\jonas.dubois1\Desktop\breilting-league - Copie\laravel-vue-project\backend"

$errors = @()
$warnings = @()

# V√©rification 1: Configuration PostgreSQL
Write-Host "`nüìä V√©rification de la configuration PostgreSQL..." -ForegroundColor Yellow
$dbConfig = Get-Content "config\database.php" -Raw
if ($dbConfig -match "default.*pgsql") {
    Write-Host "‚úÖ Configuration PostgreSQL par d√©faut d√©tect√©e" -ForegroundColor Green
} else {
    $errors += "‚ùå Configuration PostgreSQL non d√©finie par d√©faut"
}

if ($dbConfig -match "ext-pgsql") {
    Write-Host "‚úÖ Extension PostgreSQL requise dans composer.json" -ForegroundColor Green
} else {
    $warnings += "‚ö†Ô∏è  Extension ext-pgsql non trouv√©e dans composer.json"
}

# V√©rification 2: Event Listeners
Write-Host "`nüéß V√©rification des Event Listeners..." -ForegroundColor Yellow
if (Test-Path "app\Listeners\SynchronizeUserScore.php") {
    $listenerContent = Get-Content "app\Listeners\SynchronizeUserScore.php" -Raw
    if ($listenerContent -match "getDateFormatSQL") {
        Write-Host "‚úÖ SynchronizeUserScore adapt√© pour PostgreSQL" -ForegroundColor Green
    } else {
        $errors += "‚ùå SynchronizeUserScore non adapt√© pour PostgreSQL"
    }
} else {
    $errors += "‚ùå SynchronizeUserScore listener manquant"
}

if (Test-Path "app\Providers\EventServiceProvider.php") {
    Write-Host "‚úÖ EventServiceProvider configur√©" -ForegroundColor Green
} else {
    $warnings += "‚ö†Ô∏è  EventServiceProvider manquant (utilise AppServiceProvider)"
}

# V√©rification 3: Fichiers de d√©ploiement
Write-Host "`nüì¶ V√©rification des fichiers de d√©ploiement..." -ForegroundColor Yellow
$deploymentFiles = @(
    "Procfile",
    "bin\deploy-heroku.ps1",
    "bin\deploy-heroku.sh",
    ".env.heroku"
)

foreach ($file in $deploymentFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file pr√©sent" -ForegroundColor Green
    } else {
        $warnings += "‚ö†Ô∏è  $file manquant"
    }
}

# V√©rification 4: Sch√©ma PostgreSQL
Write-Host "`nüóÑÔ∏è V√©rification du sch√©ma PostgreSQL..." -ForegroundColor Yellow
if (Test-Path "database\breitlingLeague_postgresql.sql") {
    $schemaContent = Get-Content "database\breitlingLeague_postgresql.sql" -Raw
    if ($schemaContent -match "BIGSERIAL" -and $schemaContent -match "quiz_status") {
        Write-Host "‚úÖ Sch√©ma PostgreSQL adapt√© avec types natifs" -ForegroundColor Green
    } else {
        $warnings += "‚ö†Ô∏è  Sch√©ma PostgreSQL pourrait n√©cessiter des ajustements"
    }
} else {
    $errors += "‚ùå Sch√©ma PostgreSQL manquant"
}

# V√©rification 5: Tests
Write-Host "`nüß™ V√©rification des tests..." -ForegroundColor Yellow
if (Test-Path "tests\Feature\EventListenerPostgreSQLTest.php") {
    Write-Host "‚úÖ Tests PostgreSQL pr√©sents" -ForegroundColor Green
} else {
    $warnings += "‚ö†Ô∏è  Tests PostgreSQL manquants"
}

# V√©rification 6: Command de test
Write-Host "`n‚öôÔ∏è V√©rification des commandes Artisan..." -ForegroundColor Yellow
if (Test-Path "app\Console\Commands\TestPostgreSQLCompatibility.php") {
    Write-Host "‚úÖ Command de test PostgreSQL pr√©sente" -ForegroundColor Green
} else {
    $warnings += "‚ö†Ô∏è  Command de test PostgreSQL manquante"
}

# V√©rification 7: Migrations
Write-Host "`nüìà V√©rification des migrations..." -ForegroundColor Yellow
$migrationFiles = Get-ChildItem "database\migrations" -Filter "*.php"
$polymorphicMigrations = $migrationFiles | Where-Object { $_.Name -match "polymorphic" }

if ($polymorphicMigrations.Count -gt 0) {
    Write-Host "‚úÖ Migrations polymorphiques d√©tect√©es" -ForegroundColor Green
} else {
    $warnings += "‚ö†Ô∏è  Aucune migration polymorphique d√©tect√©e"
}

# V√©rification 8: Seeders
Write-Host "`nüå± V√©rification des seeders..." -ForegroundColor Yellow
if (Test-Path "database\seeders\HerokuProductionSeeder.php") {
    Write-Host "‚úÖ HerokuProductionSeeder pr√©sent" -ForegroundColor Green
} else {
    $warnings += "‚ö†Ô∏è  HerokuProductionSeeder manquant"
}

if (Test-Path "database\seeders\SqliteToPostgresqlMigrationSeeder.php") {
    Write-Host "‚úÖ SqliteToPostgresqlMigrationSeeder pr√©sent" -ForegroundColor Green
} else {
    $warnings += "‚ö†Ô∏è  SqliteToPostgresqlMigrationSeeder manquant"
}

# R√©sum√©
Write-Host "`nüìã R√©sum√© de la validation:" -ForegroundColor Cyan

if ($errors.Count -eq 0) {
    Write-Host "üéâ Aucune erreur critique d√©tect√©e!" -ForegroundColor Green
    $deployReady = $true
} else {
    Write-Host "‚ùå Erreurs critiques d√©tect√©es:" -ForegroundColor Red
    foreach ($error in $errors) {
        Write-Host "  $error" -ForegroundColor Red
    }
    $deployReady = $false
}

if ($warnings.Count -gt 0) {
    Write-Host "`n‚ö†Ô∏è  Avertissements:" -ForegroundColor Yellow
    foreach ($warning in $warnings) {
        Write-Host "  $warning" -ForegroundColor Yellow
    }
}

Write-Host "`nüöÄ Statut du d√©ploiement:" -ForegroundColor Cyan
if ($deployReady) {
    Write-Host "‚úÖ PR√äT POUR HEROKU!" -ForegroundColor Green -BackgroundColor Black
    Write-Host "`nPour d√©ployer, ex√©cutez:" -ForegroundColor White
    Write-Host ".\bin\deploy-heroku.ps1 votre-nom-app" -ForegroundColor Cyan
} else {
    Write-Host "‚ùå NON PR√äT - Corrigez les erreurs ci-dessus" -ForegroundColor Red -BackgroundColor Black
}

if ($Verbose) {
    Write-Host "`n Configuration detectee:" -ForegroundColor Blue
    Write-Host "  - Backend: Laravel avec PostgreSQL" -ForegroundColor Gray
    Write-Host "  - Event Listeners: SynchronizeUserScore adapte" -ForegroundColor Gray
    Write-Host "  - Architecture: Systeme polymorphique" -ForegroundColor Gray
    Write-Host "  - Deploiement: Scripts Heroku configures" -ForegroundColor Gray
}
