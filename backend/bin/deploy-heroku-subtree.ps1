# Script de d√©ploiement Breitling League vers Heroku avec Git Subtree
# Usage: .\deploy-heroku-subtree.ps1 <nom-app-heroku>

param(
    [Parameter(Mandatory=$true)]
    [string]$AppName
)

$ErrorActionPreference = "Stop"

Write-Host "üöÄ D√©ploiement automatique vers Heroku avec Git Subtree..." -ForegroundColor Green
Write-Host "üì± App: $AppName" -ForegroundColor Cyan

# V√©rifier que Heroku CLI est install√©
try {
    heroku --version | Out-Null
} catch {
    Write-Host "‚ùå Heroku CLI non trouv√©. Installez-le depuis https://devcenter.heroku.com/articles/heroku-cli" -ForegroundColor Red
    exit 1
}

# V√©rifier que nous sommes dans le r√©pertoire racine du projet (pas dans backend/)
if ((Get-Location).Path.EndsWith("backend")) {
    Write-Host "‚ö†Ô∏è  Vous √™tes dans le dossier backend. Remontez √† la racine du projet." -ForegroundColor Yellow
    Write-Host "Ex√©cutez: cd .. && .\backend\bin\deploy-heroku-subtree.ps1 $AppName" -ForegroundColor Yellow
    exit 1
}

# V√©rifier que Git est configur√© et que nous sommes √† la racine
try {
    git status | Out-Null
} catch {
    Write-Host "‚ùå Ce n'est pas un repository Git ou Git n'est pas configur√©" -ForegroundColor Red
    exit 1
}

# V√©rifier que le dossier backend existe
if (-not (Test-Path "backend")) {
    Write-Host "‚ùå Dossier backend non trouv√©. Assurez-vous d'√™tre √† la racine du projet." -ForegroundColor Red
    exit 1
}

# V√©rifier la connexion Heroku
Write-Host "üîê V√©rification de la connexion Heroku..." -ForegroundColor Yellow
try {
    $user = heroku auth:whoami
    Write-Host "‚úÖ Connect√© √† Heroku comme: $user" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Non connect√© √† Heroku. Connectez-vous avec: heroku login" -ForegroundColor Red
    exit 1
}

# Cr√©er l'app Heroku si elle n'existe pas
Write-Host "üèóÔ∏è  V√©rification/cr√©ation de l'app Heroku..." -ForegroundColor Yellow
try {
    heroku apps:info $AppName | Out-Null
    Write-Host "‚úÖ App '$AppName' trouv√©e" -ForegroundColor Green
} catch {
    Write-Host "üÜï Cr√©ation de l'app '$AppName'..." -ForegroundColor Cyan
    heroku create $AppName --region eu
    Write-Host "‚úÖ App '$AppName' cr√©√©e" -ForegroundColor Green
}

# Ajouter PostgreSQL addon si pas encore fait
Write-Host "üêò Configuration PostgreSQL..." -ForegroundColor Yellow
$addons = heroku addons --app $AppName
if ($addons -match "heroku-postgresql") {
    Write-Host "‚úÖ PostgreSQL d√©j√† configur√©" -ForegroundColor Green
} else {
    Write-Host "üÜï Ajout de PostgreSQL..." -ForegroundColor Cyan
    heroku addons:create heroku-postgresql:mini --app $AppName
    Write-Host "‚úÖ PostgreSQL ajout√©" -ForegroundColor Green
}

# Configurer les variables d'environnement
Write-Host "‚öôÔ∏è  Configuration des variables d'environnement..." -ForegroundColor Yellow
heroku config:set `
    APP_NAME="Breitling League" `
    APP_ENV=production `
    APP_DEBUG=false `
    DB_CONNECTION=pgsql `
    CACHE_STORE=database `
    QUEUE_CONNECTION=database `
    SESSION_DRIVER=database `
    --app $AppName

Write-Host "‚úÖ Variables d'environnement configur√©es" -ForegroundColor Green

# Ajouter le remote Heroku pour le subtree backend
Write-Host "üîó Configuration du remote Git..." -ForegroundColor Yellow
$remotes = git remote
if ($remotes -contains "backend") {
    Write-Host "‚ÑπÔ∏è  Remote 'backend' d√©j√† configur√©" -ForegroundColor Blue
    git remote set-url backend "https://git.heroku.com/$AppName.git"
} else {
    Write-Host "üÜï Ajout du remote 'backend'..." -ForegroundColor Cyan
    git remote add backend "https://git.heroku.com/$AppName.git"
}

Write-Host "‚úÖ Remote configur√©: backend -> https://git.heroku.com/$AppName.git" -ForegroundColor Green

# V√©rifier que le backend est pr√™t
Write-Host "üîç V√©rification du backend..." -ForegroundColor Yellow
if (-not (Test-Path "backend\composer.json")) {
    Write-Host "‚ùå composer.json non trouv√© dans backend\" -ForegroundColor Red
    exit 1
}

if (-not (Test-Path "backend\Procfile")) {
    Write-Host "‚ùå Procfile non trouv√© dans backend\" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Backend valid√©" -ForegroundColor Green

# V√©rifier les changements Git
Write-Host "üìù V√©rification des changements Git..." -ForegroundColor Yellow
$gitStatus = git status --porcelain
if ($gitStatus) {
    Write-Host "‚ö†Ô∏è  Il y a des changements non commit√©s." -ForegroundColor Yellow
    $response = Read-Host "Voulez-vous les commiter automatiquement? (y/N)"
    if ($response -eq 'y' -or $response -eq 'Y') {
        git add .
        git commit -m "Deploy: Pr√©paration pour d√©ploiement Heroku"
        Write-Host "‚úÖ Changements commit√©s" -ForegroundColor Green
    } else {
        Write-Host "‚ùå D√©ploiement annul√©. Committez vos changements d'abord." -ForegroundColor Red
        exit 1
    }
}

# D√©ployer avec Git subtree
Write-Host "üöÄ D√©ploiement avec Git subtree..." -ForegroundColor Green
Write-Host "üì§ Commande: git subtree push --prefix=backend backend main" -ForegroundColor Cyan

try {
    git subtree push --prefix=backend backend main
    Write-Host "‚úÖ D√©ploiement r√©ussi!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors du d√©ploiement subtree" -ForegroundColor Red
    Write-Host "üîß Solutions possibles:" -ForegroundColor Yellow
    Write-Host "   1. V√©rifiez que le remote 'backend' pointe vers Heroku" -ForegroundColor Gray
    Write-Host "   2. Essayez: git subtree push --prefix=backend backend main --force" -ForegroundColor Gray
    Write-Host "   3. V√©rifiez vos permissions Heroku" -ForegroundColor Gray
    exit 1
}

# Attendre que le d√©ploiement soit termin√©
Write-Host "‚è≥ Attente de la fin du d√©ploiement..." -ForegroundColor Yellow
Start-Sleep -Seconds 10

# V√©rifier le statut de l'app
Write-Host "üîç V√©rification du statut de l'application..." -ForegroundColor Yellow
$psStatus = heroku ps --app $AppName
if ($psStatus -match "web.*up") {
    $appInfo = heroku info --app $AppName
    $appUrl = ($appInfo | Where-Object { $_ -match "Web URL" }) -replace ".*Web URL:\s+", ""
    Write-Host "‚úÖ Application d√©ploy√©e avec succ√®s!" -ForegroundColor Green
    Write-Host "üåê URL: $appUrl" -ForegroundColor Cyan
    
    # Proposer d'ouvrir l'app dans le navigateur
    $response = Read-Host "Voulez-vous ouvrir l'application dans le navigateur? (y/N)"
    if ($response -eq 'y' -or $response -eq 'Y') {
        heroku open --app $AppName
    }
} else {
    Write-Host "‚ö†Ô∏è  L'application semble avoir des probl√®mes" -ForegroundColor Yellow
    Write-Host "üìä V√©rifiez les logs: heroku logs --tail --app $AppName" -ForegroundColor Gray
}

Write-Host ""
Write-Host "üéâ D√©ploiement termin√©!" -ForegroundColor Green
Write-Host "üìã Commandes utiles:" -ForegroundColor Blue
Write-Host "   heroku logs --tail --app $AppName    # Voir les logs" -ForegroundColor Gray
Write-Host "   heroku ps --app $AppName             # Statut des dynos" -ForegroundColor Gray
Write-Host "   heroku config --app $AppName         # Variables d'environnement" -ForegroundColor Gray
Write-Host "   heroku pg:info --app $AppName        # Info PostgreSQL" -ForegroundColor Gray
