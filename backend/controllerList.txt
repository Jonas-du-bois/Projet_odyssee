🔐 AuthController
But : Authentification via Sanctum

Routes
POST /api/register → register()

POST /api/login → login()

POST /api/logout → logout()

GET /api/me → me()

Fonctions & logique
register() : créer User, hasher mot de passe, créer token

login() : vérifier User + mot de passe, générer token

logout() : supprimer token courant

me() : renvoyer les infos du user connecté

📚 ChapterController
But : Lecture des chapitres et unités

Routes
GET /api/chapters → index()

GET /api/chapters/{id} → show()

Fonctions & logique
index() : renvoie tous les Chapter avec Unit

show($id) : renvoie un Chapter spécifique avec Unit

📦 DiscoveryController
But : Gestion des modules Discovery

Routes (admin)
GET /api/discoveries → index()

GET /api/discoveries/{id} → show()

POST /api/discoveries → store() ✅

PUT /api/discoveries/{id} → update() ✅

DELETE /api/discoveries/{id} → destroy() ✅

Fonctions
index() : liste des Discoveries disponibles

store() : créer une Discovery

update($id) : modifier une Discovery

destroy($id) : supprimer

🧠 QuizController
But : Créer, enregistrer, retourner une session de quiz

Routes
POST /api/quiz/start → start()

POST /api/quiz/submit → submitAnswers()

GET /api/quiz/{id}/result → getResult()

Fonctions
start() : créer QuizInstance, retourner questions liées

submitAnswers() : créer UserAnswer, calculer score, créer UserQuizScore

getResult() : retourner les réponses + score d’un quiz joué

📅 WeeklyController
But : Jouer, créer et gérer les Weekly challenges

Routes
GET /api/weekly → index() (user)

POST /api/weekly/{id}/claim → claimTicket() (user)

GET /api/weekly/series → getSeries() (user)

POST /api/weekly → store() ✅

PUT /api/weekly/{id} → update() ✅

DELETE /api/weekly/{id} → destroy() ✅

Fonctions
index() : liste des Weekly disponibles cette semaine

claimTicket($id) : si réussi → créer LotteryTicket, MAJ série

getSeries() : retour de WeeklySeries

store() : créer un Weekly

update($id) : modifier

destroy($id) : supprimer

🔁 ReminderController
Routes (admin)
GET /api/reminders → index()

POST /api/reminders → store() ✅

PUT /api/reminders/{id} → update() ✅

DELETE /api/reminders/{id} → destroy() ✅

Fonctions
Créer, éditer et supprimer des Reminder à afficher aux utilisateurs

Peut être déclenché par une règle métier automatisée

🎉 EventController
Routes (admin)
GET /api/events → index()

POST /api/events → store() ✅

PUT /api/events/{id} → update() ✅

DELETE /api/events/{id} → destroy() ✅

Fonctions
Créer des Event à thème (fêtes, etc.)

Définir dates de validité

🆕 NoveltyController
Routes (admin)
GET /api/novelties → index()

POST /api/novelties → store() ✅

PUT /api/novelties/{id} → update() ✅

DELETE /api/novelties/{id} → destroy() ✅

Fonctions
Créer des contenus Novelty (produits récents)

Bonus si effectué dans une période donnée

📈 ProgressController
But : Afficher l'avancement utilisateur

Routes
GET /api/progress → getProgress()

GET /api/progress/rank → getRang()

GET /api/progress/history → getUserQuizHistory()

GET /api/progress/wrap → getWrapData()

Fonctions
Calculer % de progression

Retourner le rang + stats utilisateur

Wrap de saison avec tous les stats

🎟️ TicketController
But : Gestion des tickets, bonus de séries

Routes
GET /api/tickets → listTickets()

POST /api/tickets/bonus → claimBonus()

GET /api/tickets/stats → getStats()

Fonctions
Lister tous les tickets

Attribuer ticket bonus (chaque 5 Weekly consécutifs)

Statistiques wrap

🔔 NotificationController
But : Gestion des messages envoyés au user

Routes
GET /api/notifications → index()

PATCH /api/notifications/{id}/read → markAsRead()

GET /api/notifications/unread-count → unreadCount()

Fonctions
Lister les notifications

Marquer comme lu

Compter les non lues

👤 UserController (optionnel)
But : Gérer le profil utilisateur

Routes
GET /api/profile → show()

PUT /api/profile → update()

Fonctions
Voir / modifier les infos de l’utilisateur connecté